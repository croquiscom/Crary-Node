// Generated by CoffeeScript 1.9.1
(function() {
  module.exports = function(config) {
    var format, log4js, logger, project_root;
    log4js = require('log4js');
    log4js.configure(config.log4js_config);
    logger = log4js.getLogger('express');
    project_root = config.project_root + '/';
    format = function(req, res) {
      var e, error_cause_message, error_message, error_stack, pos, stack, url;
      if (req.skip_logging) {
        return '';
      }
      if (e = res.error) {
        error_message = e._code || e.message;
        if (!e._code && (stack = e.stack)) {
          stack = stack.substr(stack.indexOf('\n') + 1);
          if ((pos = stack.indexOf('response.setError')) >= 0) {
            stack = stack.substr(stack.indexOf('\n', pos) + 1);
          }
          error_stack = stack.split('\n', 3).map(function(line) {
            return line.replace(project_root, '').trim();
          });
        }
        if (e = e.cause) {
          error_cause_message = e.message;
        }
      }
      url = req.originalUrl;
      if ((pos = url.indexOf('?')) >= 0) {
        url = url.substr(0, pos);
      }
      if (url[url.length - 1] === '/') {
        url = url.substr(0, url.length - 1);
      }
      return {
        inspect: function() {
          var msg;
          msg = "<" + (this.C.s.substr(0, 6)) + "> [" + this.C.t + "ms] " + this.C.a + " - - \"" + this.I.m + " " + this.I.u + " HTTP/" + this.I.v + "\" " + this.O.s + " " + this.O.l + " \"" + this.I.r + "\" \"" + this.I.a + "\"";
          msg += "\n\tI] q: " + (JSON.stringify(this.I.q)) + ", b: " + (JSON.stringify(this.I.b)) + ", f: " + (JSON.stringify(this.I.f));
          if (this.O.r) {
            msg += "\n\tO] " + (JSON.stringify(this.O.r));
          }
          if (this.O.e) {
            msg += "\n\tE] " + this.O.e;
            if (this.O.ec) {
              msg += " CAUSED BY " + this.O.ec;
            }
            if (this.O.es) {
              msg += this.O.es.map(function(line) {
                return '\n\t' + line;
              }).join('');
            }
          }
          return msg;
        },
        C: {
          s: req.sessionID || '',
          t: res.responseTime,
          a: req.ip
        },
        I: {
          m: req.method,
          u: url,
          v: req.httpVersionMajor + '.' + req.httpVersionMinor,
          r: req.headers['referer'] || req.headers['referrer'] || '',
          a: req.headers['user-agent'] || '',
          q: req.query || {},
          b: req.body || {},
          f: Object.keys(req.files || {})
        },
        O: {
          s: res.__statusCode || res.statusCode,
          l: (res._headers && res._headers['content-length']) || (res.__headers && res.__headers['Content-Length']) || '-',
          e: error_message,
          es: error_stack,
          ec: error_cause_message,
          r: res.result
        }
      };
    };
    return log4js.connectLogger(logger, {
      format: format,
      level: 'auto'
    });
  };

}).call(this);
