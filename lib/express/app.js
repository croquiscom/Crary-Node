// Generated by CoffeeScript 1.7.1
(function() {
  var express, setupMiddlewares, setupRouters, setupSession;

  express = require('express');

  setupMiddlewares = function(app, config) {
    var bodyParser;
    bodyParser = require('body-parser');
    app.use(require('compression')());
    app.use(require('connect-decompress')());
    app.use(bodyParser.json());
    app.use(bodyParser.urlencoded({
      extended: true
    }));
    return app.use(require('cookie-parser')());
  };

  setupSession = function(app, config) {
    var RedisStore, redis, redis_client, session, sessionStore;
    session = require('express-session');
    redis = require('redis');
    RedisStore = require('connect-redis')(session);
    redis_client = redis.createClient(config.redis_port);
    sessionStore = new RedisStore({
      client: redis_client,
      ttl: config.session_ttl
    });
    sessionStore.on('disconnect', function() {
      console.log("RedisStore for express is disconnected. Exit the process...");
      return setTimeout((function() {
        return process.exit(0);
      }), 1000);
    });
    return app.use(session({
      store: sessionStore,
      secret: config.session_secret,
      cookie: {
        maxAge: config.session_ttl * 1000
      },
      saveUninitialized: false,
      resave: true
    }));
  };

  setupRouters = function(app, config) {
    var ctor, path, router, _ref, _results;
    _ref = config.routers;
    _results = [];
    for (path in _ref) {
      ctor = _ref[path];
      router = express.Router();
      ctor(router, app);
      if (path) {
        _results.push(app.use(path, router));
      } else {
        _results.push(app.use(router));
      }
    }
    return _results;
  };

  module.exports = function(config) {
    var app;
    app = express();
    app.set('trust proxy', true);
    if (config.log4js_config) {
      app.use(require('./logger')(config));
    }
    setupMiddlewares(app, config);
    setupSession(app, config);
    setupRouters(app, config);
    return app;
  };

}).call(this);
