// Generated by CoffeeScript 1.8.0
(function() {
  var express, setupErrorHandler, setupMiddlewares, setupRouters, setupSession;

  express = require('express');

  setupMiddlewares = function(app, config) {
    var bodyParser;
    bodyParser = require('body-parser');
    app.use(require('compression')());
    app.use(bodyParser.json());
    app.use(bodyParser.urlencoded({
      extended: true
    }));
    app.use(require('cookie-parser')());
  };

  setupSession = function(app, config) {
    var RedisStore, redis, redis_client, session, sessionStore;
    session = require('express-session');
    redis = require('redis');
    RedisStore = require('connect-redis')(session);
    redis_client = redis.createClient(config.redis_port);
    sessionStore = new RedisStore({
      client: redis_client,
      ttl: config.session_ttl
    });
    sessionStore.on('disconnect', function() {
      console.log("RedisStore for express is disconnected. Exit the process...");
      setTimeout(function() {
        process.exit(0);
      }, 1000);
    });
    app.use(session({
      store: sessionStore,
      secret: config.session_secret,
      cookie: {
        maxAge: config.session_ttl * 1000
      },
      saveUninitialized: false,
      resave: true
    }));
  };

  setupRouters = function(app, config) {
    var ctor, path, router, _ref;
    _ref = config.routers;
    for (path in _ref) {
      ctor = _ref[path];
      router = express.Router();
      ctor(router, app);
      if (path) {
        app.use(path, router);
      } else {
        app.use(router);
      }
    }
  };

  setupErrorHandler = function(app, config) {
    app.use(function(err, req, res, next) {
      var code;
      if (!(err instanceof Error)) {
        err = new Error(err);
      }
      res.error = err;
      code = err.status || res.statusCode;
      if (code < 400) {
        code = 500;
      }
      res.type('application/json; charset=utf-8').status(code).json({
        error: err.message
      });
    });
  };

  module.exports = function(config) {
    var app;
    require('heapdump');
    app = express();
    app.set('trust proxy', true);
    if (config.log4js_config) {
      app.use(require('./logger')(config));
    }
    setupMiddlewares(app, config);
    setupSession(app, config);
    setupRouters(app, config);
    setupErrorHandler(app, config);
    app.response._errors = config.errors || {};
    require('./response').install(app.response);
    return app;
  };

}).call(this);
